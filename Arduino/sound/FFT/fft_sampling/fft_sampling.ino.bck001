int data[64] = {0, 11, -17, 14, -8, 0, 12, -14, 14, -8, -1, 9, -13, 13, -9, -1, 8, 
            -12, 13, -8, -1, 9, -12, 14, -7, 0, 7, -13, 12, -5, -3, 11, -16, 13, 
            -8, 0, 10, -14, 12, -9, 0, 10, -13, 14, -8, 0, 11, -11, 15, -8, 0, 11, 
            -15, 12, -9, 1, 10, -15, 13, -7, -2, 10, -18, 15};
/*
int data0[64] = {-17, 14, -8, -2, 10, -11, 14, -8, 1, 11, -16, 14, -9, 1, 10, -12, 14, 
                -11, 4, 7, -17, 14, -9, 0, 11, -17, 14, -8, 0, 12, -14, 14, -8, -1, 9, 
                -13, 13, -9, -1, 8, -12, 13, -8, -1, 9, -12, 14, -7, 0, 7, -13, 12, -5, 
                -3, 11, -16, 13, -8, 0, 10, -14, 12, -9, 0};

int data1[64] = {-9, -2, 11, -9, 2, 9, -10, 7, 2, -9, 11, -10, 3, 6, -10, 11, -6, 0, 
                10, -10, 10, -4, -1, 9, -10, 9, -1, -5, 10, -10, 8, 0, -8, 11, -8, 3, 
                7, -10, 10, -5, -1, 9, -10, 9, -1, -5, 10, -10, 8, 1, -8, 11, -8, 2, 
                7, -10, 10, -5, -1, 9, -10, 10, -3, -3};

int data2[64] = {-10, 10, -4, -2, 9, -11, 9, -1, -6, 10, -10, 8, 1, -8, 11, -7, 3, 7, 
                -10, 10, -5, -1, 8, -10, 9, -1, -5, 10, -10, 8, 0, -8, 11, -8, 2, 7, 
                -10, 10, -5, -2, 8, -10, 9, 0, -7, 11, -8, 4, 6, -9, 9, -2, -4, 10, 
                -9, 7, 3, -9, 11, -7, 1, 8, -10, 9};

int data3[64] = {-10, 9, -1, -5, 10, -10, 8, 1, -8, 11, -9, 3, 6, -10, 11, -6, 1, 9, 
                -9, 7, 2, -8, 10, -6, 1, 7, -9, 7, 1, -7, 10, -7, 2, 6, -8, 8, -1, -5, 
                9, -7, 3, 6, -10, 9, -3, -3, 9, -9, 6, 4, -9, 10, -5, -1, 7, -10, 10, 
                -4, -3, 9, -10, 9, 0, -7, };
*/
/*
int data06[64] = {-2, -1, 2, 4, -2, -3, 6, -2, -1, 6, -5, 6, -4, 6, -5, 4, 1, -4, 8, 
                -8, 6, 2, -7, 10, -5, -1, 10, -13, 14, -10, 7, 4, -11, 14, -12, 11, -4, 
                -3, 11, -12, 14, -8, 1, 10, -12, 13, -7, 1, 10, -12, 14, -6, -1, 10, -13, 
                13, -6, -1, 10, -13, 13, -8, 1, 11};
*/

int data07[64] = {-10, 12, -10, 8, 2, -10, 13, -12, 11, -3, -4, 12, -13, 14, -8, 1, 10, 
                -13, 15, -10, 7, 5, -13, 15, -12, 9, 3, -12, 15, -13, 11, -2, -6, 13, -13, 
                13, -6, -1, 10, -14, 15, -10, 11, 3, -12, 15, -12, 10, -2, -6, 9, -14, 12, 
                -4, -4, 12, -14, 14, -8, 1, 11, -15, 15, -10};

int data08[64] = {-14, 17, -9, 0, 14, -19, 17, -11, 6, 9, -16, 17, -11, 7, 7, -15, 18, 
                -12, 8, 6, -16, 16, -12, 10, 0, -13, 16, -13, 14, -4, -6, 15, -18, 17, 
                -8, -1, 11, -13, 16, -11, 7, 8, -14, 17, -11, 6, 9, -18, 18, -11, 6, 10, 
                -15, 18, -14, 9, 5, -17, 18, -14, 12, 0, -13, 18};

int data10[64] = {-2, 1, 2, -1, 0, 2, -1, -2, 1, 0, -1, 2, 1, -2, 1, 1, -1, 0, 2, 0, -1, 
                2, 1, -1, 2, 2, -1, 1, 2, 0, -1, 2, 1, -1, 1, 1, -2, 0, 1, -1, 0, 2, 1, 
                -1, 2, 1, -1, 1, 2, 0, 1, 3, 0, 0, 2, 1, -1, 1, 1, -1, 0, 2, 0, -1};

int data11[64] = {2, 2, 0, 2, 1, -1, 1, 0, -1, 0, 1, -1, -1, 2, 0, -1, 2, 0, 0, 2, 2, 0, 
                2, 2, -1, 0, 1, 0, -1, 1, 0, -1, 1, 1, -1, 0, 1, 0, 0, 2, 1, 0, 2, 2, -1, 
                1, 2, 0, 0, 2, 1, -1, 1, 0, -2, 0, 1, -1, 0, 1, 0, 0, 2, 1};

int data12[64] = {-1, 1, 2, 0, 0, 2, 0, -1, 1, 1, -2, 1, 1, -1, 0, 2, 0, 0, 2, 1, -1, 1, 
                2, 0, 0, 2, 0, -1, 2, 1, -1, 1, 1, -1, 0, 2, 0, 0, 2, 1, 0, 1, 2, 0, 0, 
                2, 1, -1, 2, 1, -1, 1, 1, -1, 0, 2, 0, 0, 2, 1, -1, 1, 2, 0};

/* output verificado 
Start-------------------Data
40.63
46.88
Start-------------------Data1
39.06
34.38
Start-------------------Data2
39.06
31.25
Start-------------------Data3
37.50
32.81
Start-------------------Data06
40.63
45.31
Start-------------------Data07
40.63
46.88
Start-------------------Data08
40.63
43.75
Start-------------------Data10
29.69
3.13
Start-------------------Data11
31.25
4.69
Start-------------------Data12
29.69
34.38
Finish-------------------

*/



//---------------------------------------------------------------------------//
byte sine_data [91]=
 {
0,  
4,    9,    13,   18,   22,   27,   31,   35,   40,   44, 
49,   53,   57,   62,   66,   70,   75,   79,   83,   87, 
91,   96,   100,  104,  108,  112,  116,  120,  124,  127,  
131,  135,  139,  143,  146,  150,  153,  157,  160,  164,  
167,  171,  174,  177,  180,  183,  186,  189,  192,  195,       //Paste this at top of program
198,  201,  204,  206,  209,  211,  214,  216,  219,  221,  
223,  225,  227,  229,  231,  233,  235,  236,  238,  240,  
241,  243,  244,  245,  246,  247,  248,  249,  250,  251,  
252,  253,  253,  254,  254,  254,  255,  255,  255,  255
  };
float f_peaks[5]; // top 5 frequencies peaks in descending order
//---------------------------------------------------------------------------//

void setup(){
    Serial.begin(19200);

}


void loop(){
    Serial.println("Start-------------------Data");
    FFT(data, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);
/*
    Serial.println("Start-------------------Data1");
    FFT(data1, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);

    Serial.println("Start-------------------Data2");
    FFT(data2, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);

    Serial.println("Start-------------------Data3");
    FFT(data3, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);
*/
/*
    Serial.println("Start-------------------Data06");
    FFT(data06, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);
*/
    Serial.println("Start-------------------Data07");
    FFT(data07, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);

    Serial.println("Start-------------------Data08");
    FFT(data08, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);

    Serial.println("Start-------------------Data10");
    FFT(data10, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);

    Serial.println("Start-------------------Data11");
    FFT(data11, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);

    Serial.println("Start-------------------Data12");
    FFT(data12, 64, 100);
    Serial.println(f_peaks[0]);
    Serial.println(f_peaks[1]);
    //delay(1000);

    Serial.println("Finish-------------------\n\n");
    delay(10000);

}

//-----------------------------FFT Function----------------------------------------------//

float FFT(int in[],int N,float Frequency)
{
/*
Code to perform FFT on arduino,
setup:
paste sine_data [91] at top of program [global variable], paste FFT function at end of program
Term:
1. in[]     : Data array, 
2. N        : Number of sample (recommended sample size 2,4,8,16,32,64,128...)
3. Frequency: sampling frequency required as input (Hz)

If sample size is not in power of 2 it will be clipped to lower side of number. 
i.e, for 150 number of samples, code will consider first 128 sample, remaining sample  will be omitted.
For Arduino nano, FFT of more than 128 sample not possible due to mamory limitation (64 recomended)
For higher Number of sample may arise Mamory related issue,
Code by ABHILASH
Contact: abhilashpatel121@gmail.com 
Documentation:https://www.instructables.com/member/abhilash_patel/instructables/
*/

unsigned int data[13]={1,2,4,8,16,32,64,128,256,512,1024,2048};
int a,c1,f,o,x;
a=N;  
                                 
      for(int i=0;i<12;i++)                 //calculating the levels
         { if(data[i]<=a){o=i;} }
      
int in_ps[data[o]]={};     //input for sequencing
float out_r[data[o]]={};   //real part of transform
float out_im[data[o]]={};  //imaginory part of transform
           
x=0;  
      for(int b=0;b<o;b++)                     // bit reversal
         {
          c1=data[b];
          f=data[o]/(c1+c1);
                for(int j=0;j<c1;j++)
                    { 
                     x=x+1;
                     in_ps[x]=in_ps[j]+f;
                    }
         }

 
      for(int i=0;i<data[o];i++)            // update input array as per bit reverse order
         {
          if(in_ps[i]<a)
          {out_r[i]=in[in_ps[i]];}
          if(in_ps[i]>a)
          {out_r[i]=in[in_ps[i]-a];}      
         }


int i10,i11,n1;
float e,c,s,tr,ti;

    for(int i=0;i<o;i++)                                    //fft
    {
     i10=data[i];              // overall values of sine/cosine  :
     i11=data[o]/data[i+1];    // loop with similar sine cosine:
     e=360/data[i+1];
     e=0-e;
     n1=0;

          for(int j=0;j<i10;j++)
          {
          c=cosine(e*j);
          s=sine(e*j);    
          n1=j;
          
                for(int k=0;k<i11;k++)
                 {
                 tr=c*out_r[i10+n1]-s*out_im[i10+n1];
                 ti=s*out_r[i10+n1]+c*out_im[i10+n1];
          
                 out_r[n1+i10]=out_r[n1]-tr;
                 out_r[n1]=out_r[n1]+tr;
          
                 out_im[n1+i10]=out_im[n1]-ti;
                 out_im[n1]=out_im[n1]+ti;          
          
                 n1=n1+i10+i10;
                  }       
             }
     }

/*
for(int i=0;i<data[o];i++)
{
Serial.print(out_r[i]);
Serial.print("\t");                                     // un comment to print RAW o/p    
Serial.print(out_im[i]); Serial.println("i");      
}
*/


//---> here onward out_r contains amplitude and our_in conntains frequency (Hz)
    for(int i=0;i<data[o-1];i++)               // getting amplitude from compex number
        {
         out_r[i]=sqrt(out_r[i]*out_r[i]+out_im[i]*out_im[i]); // to  increase the speed delete sqrt
         out_im[i]=i*Frequency/N;
         /*
         Serial.print(out_im[i]); Serial.print("Hz");
         Serial.print("\t");                            // un comment to print freuency bin    
         Serial.println(out_r[i]); 
         */    
        }




x=0;       // peak detection
   for(int i=1;i<data[o-1]-1;i++)
      {
      if(out_r[i]>out_r[i-1] && out_r[i]>out_r[i+1]) 
      {in_ps[x]=i;    //in_ps array used for storage of peak number
      x=x+1;}    
      }


s=0;
c=0;
    for(int i=0;i<x;i++)             // re arraange as per magnitude
    {
        for(int j=c;j<x;j++)
        {
            if(out_r[in_ps[i]]<out_r[in_ps[j]]) 
                {s=in_ps[i];
                in_ps[i]=in_ps[j];
                in_ps[j]=s;}
        }
    c=c+1;
    }



    for(int i=0;i<5;i++)     // updating f_peak array (global variable)with descending order
    {
    f_peaks[i]=out_im[in_ps[i]];
    }



}
    

float sine(int i)
{
  int j=i;
  float out;
  while(j<0){j=j+360;}
  while(j>360){j=j-360;}
  if(j>-1   && j<91){out= sine_data[j];}
  else if(j>90  && j<181){out= sine_data[180-j];}
  else if(j>180 && j<271){out= -sine_data[j-180];}
  else if(j>270 && j<361){out= -sine_data[360-j];}
  return (out/255);
}

float cosine(int i)
{
  int j=i;
  float out;
  while(j<0){j=j+360;}
  while(j>360){j=j-360;}
  if(j>-1   && j<91){out= sine_data[90-j];}
  else if(j>90  && j<181){out= -sine_data[j-90];}
  else if(j>180 && j<271){out= -sine_data[270-j];}
  else if(j>270 && j<361){out= sine_data[j-270];}
  return (out/255);
}

//------------------------------------------------------------------------------------//
